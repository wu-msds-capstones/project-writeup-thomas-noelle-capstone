)
intersection_eda <- intersection_eda %>%
mutate(
bikeped_pct = if_else(total_crashes > 0, bikeped_crashes / total_crashes, NA_real_)
)
intersection_eda %>%
filter(!is.na(bikeped_pct)) %>%
ggplot(aes(x = calming_greenway_group, y = bikeped_pct)) +
geom_boxplot(fill = "#f37b83", alpha = 0.6) +
labs(
title = "Bike/Ped Crash Proportion by Infrastructure Group",
x = "Intersection Group",
y = "Bike/Ped Crashes as % of Total Crashes"
) +
theme_minimal()
intersection_eda %>%
filter(!is.na(bikeped_pct)) %>%
ggplot(aes(x = calming_greenway_group, y = bikeped_pct, fill = calming_greenway_group)) +
geom_violin(trim = FALSE, alpha = 0.6) +
stat_summary(fun = median, geom = "point", shape = 23, size = 3, fill = "black") +
labs(
title = "Bike/Ped Crash Proportion by Infrastructure Group",
x = "Intersection Group",
y = "Bike/Ped Crashes as % of Total Crashes"
) +
theme_minimal() +
theme(legend.position = "none")
kruskal.test(bikeped_pct ~ calming_greenway_group, data = intersection_eda)
severity_by_intersection <- crashes_all %>%
filter(!is.na(crash_svrty_long_desc)) %>%
group_by(intersection_id, crash_svrty_long_desc) %>%
summarize(n = n(), .groups = "drop") %>%
pivot_wider(
names_from = crash_svrty_long_desc,
values_from = n,
values_fill = 0
)
intersection_eda <- intersection_eda %>%
left_join(severity_by_intersection, by = "intersection_id")
severity_long <- intersection_eda %>%
filter(total_crashes > 0) %>%
mutate(
total_known_severity = coalesce(`Property Damage Only`, 0) +
coalesce(`Non-Fatal Injury`, 0) +
coalesce(Fatal, 0)
) %>%
select(
intersection_id,
calming_greenway_group,
`Property Damage Only`,
`Non-Fatal Injury`,
Fatal,
total_known_severity
) %>%
pivot_longer(
cols = c(`Property Damage Only`, `Non-Fatal Injury`, Fatal),
names_to = "severity",
values_to = "count"
) %>%
mutate(
pct = count / total_known_severity
)
ggplot(severity_long, aes(x = calming_greenway_group, y = pct, fill = severity)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_brewer(palette = "Set2") +
labs(
title = "Crash Severity Breakdown by Infrastructure Group",
x = "Intersection Group",
y = "Share of Crashes",
fill = "Severity"
) +
theme_minimal()
#not very enlightening
crashes_bikeped <- crashes_all %>%
filter(
tot_pedcycl_cnt > 0 | tot_pedcycl_inj_cnt > 0 | tot_pedcycl_fatal_cnt > 0 |
tot_ped_cnt > 0 | tot_ped_inj_cnt > 0 | tot_ped_fatal_cnt > 0
)
severity_bikeped_by_intersection <- crashes_bikeped %>%
filter(!is.na(crash_svrty_long_desc)) %>%
group_by(intersection_id, crash_svrty_long_desc) %>%
summarize(n = n(), .groups = "drop") %>%
pivot_wider(
names_from = crash_svrty_long_desc,
values_from = n,
values_fill = 0
)
#bikeped_counts$intersection_id is character
bikeped_counts <- bikeped_counts %>%
mutate(intersection_id = as.character(intersection_id))
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
# Crashes
addCircleMarkers(data = crashes_sf,
radius = 2,
color = "#f37b83",
stroke = FALSE,
fillOpacity = 0.4,
group = "Crashes") %>%
# Greenways
addCircleMarkers(data = network_sf,
radius = 2,
color = "#36B37E",
stroke = FALSE,
fillOpacity = 0.6,
group = "Greenways") %>%
# Calming Features
addCircleMarkers(data = calming_sf,
radius = 3,
color = "#007ACC",
stroke = TRUE,
weight = 1,
fillOpacity = 0.8,
group = "Calming Features") %>%
addLayersControl(overlayGroups = c("Crashes", "Greenways", "Calming Features"),
options = layersControlOptions(collapsed = FALSE))
network_sf <- network %>%
filter(!is.na(lat) & !is.na(lon)) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326)
calming_sf <- calming %>%
filter(!is.na(lat) & !is.na(lon)) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
# Crashes
addCircleMarkers(data = crashes_sf,
radius = 2,
color = "#f37b83",
stroke = FALSE,
fillOpacity = 0.4,
group = "Crashes") %>%
# Greenways
addCircleMarkers(data = network_sf,
radius = 2,
color = "#36B37E",
stroke = FALSE,
fillOpacity = 0.6,
group = "Greenways") %>%
# Calming Features
addCircleMarkers(data = calming_sf,
radius = 3,
color = "#007ACC",
stroke = TRUE,
weight = 1,
fillOpacity = 0.8,
group = "Calming Features") %>%
addLayersControl(overlayGroups = c("Crashes", "Greenways", "Calming Features"),
options = layersControlOptions(collapsed = FALSE))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DBI)
library(sf)
library(GGally)
library(lubridate)
library(janitor)
library(leaflet)
con <- dbConnect(
RPostgres::Postgres(),
dbname = 'data510capstone',
host = '100.127.69.80',
port = 5432,
user = 'thomas',
password = 'thomas_noelle_capstone'
)
sql_crashes <- tbl(con, sql("SELECT * FROM crashes"))
sql_intrsct <- tbl(con, sql("SELECT * FROM intersections"))
sql_network <- tbl(con, sql("SELECT * FROM bicycle_network"))
sql_slights <- tbl(con, sql("SELECT * FROM street_lights"))
sql_calming <- tbl(con, sql("SELECT * FROM traffic_calming_features"))
sql_vcounts <- tbl(con, sql("SELECT * FROM traffic_volume_counts"))
sql_population <- tbl(con, sql("SELECT * FROM portland_population"))
crashes <- collect(sql_crashes)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DBI)
library(sf)
library(GGally)
library(lubridate)
library(janitor)
library(leaflet)
con <- dbConnect(
RPostgres::Postgres(),
dbname = 'data510capstone',
host = '100.127.69.80',
port = 5432,
user = 'thomas',
password = 'thomas_noelle_capstone'
)
sql_crashes <- tbl(con, sql("SELECT * FROM crashes"))
sql_intrsct <- tbl(con, sql("SELECT * FROM intersections"))
sql_network <- tbl(con, sql("SELECT * FROM bicycle_network"))
sql_slights <- tbl(con, sql("SELECT * FROM street_lights"))
sql_calming <- tbl(con, sql("SELECT * FROM traffic_calming_features"))
sql_vcounts <- tbl(con, sql("SELECT * FROM traffic_volume_counts"))
sql_population <- tbl(con, sql("SELECT * FROM portland_population"))
crashes <- collect(sql_crashes)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DBI)
library(sf)
library(GGally)
library(lubridate)
library(janitor)
library(leaflet)
con <- dbConnect(
RPostgres::Postgres(),
dbname = 'data510capstone',
host = '100.127.69.80',
port = 5432,
user = 'thomas',
password = 'thomas_noelle_capstone'
)
sql_crashes <- tbl(con, sql("SELECT * FROM crashes"))
sql_intrsct <- tbl(con, sql("SELECT * FROM intersections"))
sql_network <- tbl(con, sql("SELECT * FROM bicycle_network"))
sql_slights <- tbl(con, sql("SELECT * FROM street_lights"))
sql_calming <- tbl(con, sql("SELECT * FROM traffic_calming_features"))
sql_vcounts <- tbl(con, sql("SELECT * FROM traffic_volume_counts"))
sql_population <- tbl(con, sql("SELECT * FROM portland_population"))
crashes <- collect(sql_crashes)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DBI)
library(sf)
library(GGally)
library(lubridate)
library(janitor)
library(leaflet)
library(caret)
library(doParallel)
con <- dbConnect(
RPostgres::Postgres(),
dbname = 'data510capstone',
host = '100.127.69.80',
port = 5432,
user = 'thomas',
password = 'thomas_noelle_capstone'
)
sql_crashes <- tbl(con, sql("SELECT * FROM crashes"))
sql_intrsct <- tbl(con, sql("SELECT * FROM intersections"))
sql_network <- tbl(con, sql("SELECT * FROM bicycle_network"))
sql_slimits <- tbl(con, sql("SELECT * FROM speed_limits"))
sql_slights <- tbl(con, sql("SELECT * FROM street_lights"))
sql_calming <- tbl(con, sql("SELECT * FROM traffic_calming_features"))
sql_vcounts <- tbl(con, sql("SELECT * FROM traffic_volume_counts"))
sql_population <- tbl(con, sql("SELECT * FROM portland_population"))
crashes <- collect(sql_crashes)
intrsct <- collect(sql_intrsct)
network <- collect(sql_network)
slimits <- collect(sql_slimits)
slights <- collect(sql_slights)
calming <- collect(sql_calming)
vcounts <- collect(sql_vcounts)
population <- collect(sql_population)
unique(crashes$city_sect_nm)
# Filter for city contains the string "Portland"
crashes <- crashes %>%
filter(grepl("Portland", city_sect_nm))
crashes$st_full_nm <- trimws(crashes$st_full_nm)
crashes$isect_st_full_nm <- trimws(crashes$isect_st_full_nm)
crashes <- filter(crashes, !(st_full_nm == "" & isect_st_full_nm == ""))
crashes$isect_typ_short_desc <- ifelse(
is.na(crashes$isect_typ_short_desc),
"UNKNOWN", crashes$isect_typ_short_desc
)
# If median type is unknown, then we assume no median.
crashes$medn_typ_long_desc <- ifelse(is.na(crashes$medn_typ_long_desc), "No median", crashes$medn_typ_long_desc)
# Assume if unknown, then probably not involved.
crashes$mj_invlv_flg <- ifelse(is.na(crashes$mj_invlv_flg), "No", crashes$mj_invlv_flg)
crashes <- crashes %>%
mutate(
crash_date = as.Date(crash_dt),
crash_day = day(crash_date),
crash_month = month(crash_date, label = TRUE),
bike_flg = ifelse(tot_pedcycl_cnt > 0 | tot_pedcycl_inj_cnt > 0 | tot_pedcycl_fatal_cnt > 0, 1, 0),
ped_flg = ifelse(tot_ped_cnt > 0 | tot_ped_inj_cnt > 0 | tot_ped_fatal_cnt > 0, 1, 0),
# Grouping together intersection type
isect_group = ifelse(
isect_typ_short_desc %in% c("5-LEG", "6-LEG", "7-LEG", "8-LEG", "9-LEG"),
"GTE-5-LEG",
isect_typ_short_desc
),
# Grouping together hour of the day also
crash_hr_grp = case_when(
crash_hr_no >= 0  & crash_hr_no < 5  ~ "Late Night",
crash_hr_no >= 5  & crash_hr_no < 7  ~ "Early Morning",
crash_hr_no >= 7  & crash_hr_no < 9  ~ "Morning Rush",
crash_hr_no >= 9  & crash_hr_no < 12 ~ "Late Morning",
crash_hr_no >= 12 & crash_hr_no < 15 ~ "Midday",
crash_hr_no >= 15 & crash_hr_no < 18 ~ "Afternoon Rush",
crash_hr_no >= 18 & crash_hr_no < 22 ~ "Evening",
crash_hr_no >= 22 & crash_hr_no <= 23 ~ "Night",
# Unknown with a . because dummyVars function drops the first alphabetical column if multicollinearity.
TRUE ~ ".Unknown"
)
)
crashes <- crashes %>%
filter(!(hwy_compnt_long_desc %in% c("Connection", "Mainline State Highway")))
table(crashes$highest_inj_svrty_desc)
crashes$highest_inj_svrty_desc <- trimws(crashes$highest_inj_svrty_desc)
table(crashes$highest_inj_svrty_desc)
table(crashes$rd_char_long_desc)
table(crashes$wthr_cond_long_desc)
crashes$rd_char_grp <- fct_lump_prop(crashes$rd_char_long_desc, prop = .008)
crashes$wthr_cond_grp <- fct_lump_prop(crashes$wthr_cond_long_desc, prop = .01)
crashes <- crashes %>%
mutate(wthr_cond_grp = recode(wthr_cond_grp,
Unknown = "Other"))
crashes$isect_group <- factor(
crashes$isect_group,
levels = c("UNKNOWN", "CROSS", "2-LEG", "3-LEG", "4-LEG", "GTE-5-LEG")
)
crashes$rd_char_grp <- factor(
crashes$rd_char_grp,
levels = c("Other", "Curve (horizontal curve)", "Driveway or Alley", "Intersection", "Straight Roadway")
)
crashes$wthr_cond_grp <- factor(
crashes$wthr_cond_grp,
levels = c("Other", "Clear", "Cloudy", "Rain", "Snow")
)
crashes$lgt_cond_long_desc <- factor(
crashes$lgt_cond_long_desc,
levels = c("Unknown", "Darkness - no street lights", "Darkness - with street lights", "Dawn (Twilight)", "Dusk (Twilight)", "Daylight")
)
slights$watts <- as.numeric(gsub("W", "", slights$watts))
mean(slights$watts, na.rm = TRUE)
median(slights$watts, na.rm = TRUE)
slights$watts[is.na(slights$watts)] <- median(slights$watts, na.rm = TRUE)
calming$feature_type <- case_when(
calming$feature_type == "3810" ~ "speed_bump",
calming$feature_type == "3820" ~ "raised_crosswalk",
calming$feature_type == "3830" ~ "textured_crosswalk",
calming$feature_type == "3840" ~ "rumble_strip",
TRUE ~ NA_character_
)
vcounts_expanded <- vcounts %>%
# Converting POSIX to Date
mutate(
start_day = as.Date(startdate),
end_day = as.Date(enddate)
) %>%
# Filtering out data errors
filter(!is.na(start_day), !is.na(end_day), start_day <= end_day) %>%
# Create sequence of dates to unnest
mutate(
date_seq = map2(start_day, end_day, ~ seq(.x, .y, by = "day"))
) %>%
unnest(date_seq) %>%  # Expand rows by dates
select(-start_day, -end_day) %>%
# Extract date information
mutate(
year = year(date_seq),
month = month(date_seq, label = TRUE, abbr = TRUE),
weekday = wday(date_seq, label = TRUE, abbr = TRUE),
day = day(date_seq)
)
network_intrsct <- left_join(intrsct, network) %>%
# Filtering for NAs on Facility, active constructions, and that are not retired
filter(!is.na(facility), status == "ACTIVE", is.na(year_retired)) %>%
select(intersection_id, facility, year_built) %>%
# Getting rid of some duplicate values here
unique() %>%
# Pivot wider so that every type of facility is a column.
pivot_wider(names_from = facility, values_from = year_built)
intrsct_all <- intrsct %>%
left_join(network_intrsct)
intrsct_all <- intrsct_all %>%
left_join(slimits %>% select(intersection_id, speed_limit))
slights_intrsct <- slights %>%
group_by(intersection_id) %>%
summarize(sum_watts = sum(watts), num_lights = n())
intrsct_all <- intrsct_all %>%
left_join(slights_intrsct)
arrange(intrsct_all, desc(num_lights)) %>% select(sum_watts, num_lights, from_street, to_street)
table(calming$feature_type)
calming_intrsct <- calming %>%
group_by(intersection_id, feature_type) %>%
summarize(num_calming_features = n()) %>%
pivot_wider(names_from = feature_type, values_from = num_calming_features)
intrsct_all <- intrsct_all %>%
left_join(calming_intrsct)
length(unique(vcounts$intersection_id))
crashes_all <- vcounts %>%
group_by(intersection_id) %>%
summarize(avg_daily_vol = mean(adt_volume)) %>%
right_join(crashes)
dim(filter(crashes_all, !is.na(avg_daily_vol)))
# First replace all NAs in numeric columns in Intersections with zeroes.
intrsct_all <- intrsct_all %>%
mutate(across(where(is.numeric), ~replace_na(., 0)))
# Then impute the missing values in speed limits column with 20, which is the center by far
intrsct_all$speed_limit <- ifelse(intrsct_all$speed_limit == 0, 20, intrsct_all$speed_limit)
crashes_all <- left_join(crashes_all, intrsct_all)
crashes_all <- crashes_all %>%
mutate(
across(
.cols = c(TRL, BL, PBL, BBL, BBBL, NG, ESR, SBBL, ABL),
.fns = ~ map2_dbl(.x, crash_yr_no, ~ {
candidates <- .x[.x <= .y]
if (length(candidates) == 0) NA_real_ else max(candidates)
}),
.names = "{.col}_nt_yr"
)
)
crashes_all <- crashes_all %>%
mutate(
across(
.cols = contains("_nt_yr"),
.fns = ~ ifelse(is.na(.x), 0, 1),
.names = "{.col}_flg"
)
)
# This searches for numeric columns that only consist of 0's and 1's, then converts to factor with "Yes" and "No"
crashes_all <- crashes_all %>%
mutate(
across(
where(~ is.numeric(.x) && all(na.omit(.x) %in% c(0, 1))),
~ factor(.x, levels = c(0, 1), labels = c("No", "Yes"))
)
)
# Need to convert those that are actually numeric back to numeric (Just happened to have 0/1 only)
crashes_all$tot_pedcycl_fatal_cnt <- ifelse(as.character(crashes_all$tot_pedcycl_fatal_cnt) == "Yes", 1, 0)
crashes_all <- crashes_all %>%
mutate(
bike_ped_crash = if_else(
tot_pedcycl_cnt > 0 | tot_pedcycl_inj_cnt > 0 | tot_pedcycl_fatal_cnt > 0 |
tot_ped_cnt > 0 | tot_ped_inj_cnt > 0 | tot_ped_fatal_cnt > 0,
1, 0
),
has_calming = if_else(
rowSums(across(
c(speed_bump, raised_crosswalk, textured_crosswalk, rumble_strip),
~ as.numeric(.x)
), na.rm = TRUE) > 0,
"Yes", "No"
)
)
crashes_predictors <- crashes_all %>%
# Important step here: Filters out 25% of our data.
# Important question: Should we just filter it out? Or should we find the closest intersection to each crash?
# For now, just filter it out.
filter(!is.na(intersection_id)) %>%
select(
bike_flg, ped_flg,
crash_wk_day_cd, crash_hr_no,
# Numeric features that have many missing values...
#avg_daily_vol
speed_limit, crash_svrty_long_desc, highest_inj_svrty_desc,
isect_group, lgt_cond_long_desc, medn_typ_long_desc, rd_char_grp, rd_surf_med_desc,
wthr_cond_grp, alchl_invlv_flg, drug_invlv_flg, mj_invlv_flg,
crash_hit_run_flg, crash_speed_invlv_flg,
sum_watts, num_lights, speed_bump, raised_crosswalk, rumble_strip, textured_crosswalk,
TRL_nt_yr_flg, BL_nt_yr_flg, PBL_nt_yr_flg, BBL_nt_yr_flg, BBBL_nt_yr_flg, NG_nt_yr_flg,
ESR_nt_yr_flg, SBBL_nt_yr_flg, ABL_nt_yr_flg
)
nzv <- nearZeroVar(crashes_predictors, saveMetrics = TRUE)
# Near zero variance features:
rownames(filter(nzv, nzv))
infra_features <- c(
"TRL_nt_yr_flg", "PBL_nt_yr_flg", "BBL_nt_yr_flg", "BBBL_nt_yr_flg",
"NG_nt_yr_flg", "ESR_nt_yr_flg", "SBBL_nt_yr_flg", "ABL_nt_yr_flg"
)
calming_features <- c(
"speed_bump", "raised_crosswalk", "rumble_strip", "textured_crosswalk"
)
crashes_predictors$infrastructure <- ifelse(
rowSums(crashes_predictors[infra_features] == "Yes") > 0,
"Yes", "No"
)
crashes_predictors$calming_sum <- rowSums(crashes_predictors[calming_features])
crashes_predictors <- select(crashes_predictors,
-all_of(infra_features), -all_of(calming_features), -medn_typ_long_desc)
set.seed(51)
crashes_class <- crashes_predictors %>%
# Prevent data leakage
select(-crash_svrty_long_desc, -bike_flg, -ped_flg)
crashes_class$highest_inj_svrty_desc <- as.factor(crashes_class$highest_inj_svrty_desc)
train_index <- createDataPartition(crashes_class$highest_inj_svrty_desc, p = 0.8, list = FALSE)
train_data <- crashes_class[train_index, ]
test_data <- crashes_class[-train_index, ]
# Encoding is only done on training data because it avoids data leakage
# i.e. if one category is included in the testing dataset and not in the training data
dummies <- dummyVars(highest_inj_svrty_desc ~ ., data = train_data, fullRank = TRUE)
# Convert back to dataframe
train_x <- predict(dummies, newdata = train_data)
train_x <- as.data.frame(train_x)
# Use same transformation on testing data
test_x  <- predict(dummies, newdata = test_data)
test_x  <- as.data.frame(test_x)
# Add back on the target
train_x$highest_inj_svrty_desc <- train_data$highest_inj_svrty_desc
test_x$highest_inj_svrty_desc  <- test_data$highest_inj_svrty_desc
# Find columns missing in test but present in train
missing_cols <- setdiff(names(train_x), names(test_x))
# Add these missing columns with all zeros
for (col in missing_cols) {
test_x[[col]] <- 0
}
# Make sure columns are in the same order
test_x <- test_x[, names(train_x)]
# Set training control with 5-fold cross-validation
train_control <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
rf_model_all <- train(
highest_inj_svrty_desc ~ .,
data = train_x,
method = "ranger",
trControl = train_control,
tuneGrid = data.frame(mtry = 19, splitrule = "extratrees", min.node.size = 1),
num.trees = 100,
importance = 'impurity'
)
