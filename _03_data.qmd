# Data & Data Engineering
This project uses a variety of spatial and tabular datasets from public sources, including the Oregon Department of Transportation (ODOT), the Portland Bureau of Transportation (PBOT), and Oregon’s GEOHub. Our analysis focuses on intersection-level crash patterns from 2007 to 2022 and incorporates information on infrastructure, lighting, traffic volumes, and speed limits.

To ensure we were leveraging all available data sources and interpreting them appropriately, we conducted early meetings with members of the City of Portland’s Vision Zero team and a senior transportation planner at Parametrix specializing in active transportation and safety. These conversations informed our understanding of where relevant infrastructure data was stored, how various features were used in practice, and which fields could support reliable spatial joins. We discussed common limitations in existing datasets, including inconsistent naming conventions, missing coordinates, and duplicate infrastructure records; and received guidance on which types of infrastructure were most relevant to current safety planning efforts. These meetings also shaped our decision to normalize the schema around a master `intrsct` table and directly influenced how we defined feature categories such as neighborhood greenways, traffic calming, and lighting coverage.

We created a fully normalized PostgreSQL database structured around the `intrsct` table. All other datasets were cleaned, filtered, and joined to this central reference using either shared intersection identifiers or approximate spatial joins based on latitude and longitude. This structure enabled consistent and flexible querying by location and allowed us to integrate diverse datasets into a unified schema (see Figure 1).

### Crash Data (`crashes`)
The core of our analysis is built on over 350,000 crash records from ODOT. We filtered this dataset to include only bicycle- and pedestrian-involved crashes and dropped entries with missing or invalid coordinates. Street names were standardized to ensure alignment during joins, and each crash was assigned an `intersection_id` based on matches to the `intrsct` table. The crashes table contains fields such as crash date (`crash_dt`), severity (`crash_svrty_long_desc`), highest injury severity (`highest_inj_svrty_desc`), and participant counts (`tot_pedcycl_cnt`, `tot_ped_cnt`).

### Bicycle Infrastructure (`network`)
The `network` table, derived from PBOT’s bicycle network dataset, catalogs bicycle infrastructure such as neighborhood greenways, bike lanes, and multi-use paths. Fields include facility type (`facility`) and installation year (`year_built`). Records were standardized and spatially joined to nearby intersections in `intrsct` to enable intersection-level comparisons of infrastructure and crash outcomes.

### Street Lighting (`slights`)
The slights table contains point-level records of streetlights with attributes including wattage (`watts`) and lumen output (`lumen`). We transformed coordinates to WGS 84 and joined each light to its nearest intersection in `intrsct`. Aggregated fields, such as total wattage and light count per intersection, serve as proxies for illumination coverage.

### Traffic Calming Features (`calming`)
The calming table documents features such as speed humps, raised crosswalks, and curb extensions. Each record includes a feature type (`feature_type`) and coordinates, which were spatially joined to `intrsct` to create intersection-level calming indicators.

### Traffic Volume (`vcounts`)
The `vcounts` table contains vehicle counts by intersection, including AM and PM peak (`am_volume`, `pm_volume`) and average daily traffic counts (`avg_daily_traffic`). These data help control for traffic exposure in our later modeling and provide contextual insights into crash density relative to traffic flow.

### Speed Limits (`slimits`)
Initially excluded due to incomplete identifiers, the speed limit dataset was later processed and integrated. We used proximity-based spatial joins to assign speed limits (`speed_limit`) to intersections in `intrsct`. This variable supports analysis of posted speed environments in relation to crash severity and frequency.

### Intersections (`intrsct`)
The `intrsct` table serves as the schema’s hub, generated using the `osmnx` Python package and OpenStreetMap data. Each record includes an `intersection_id`, intersecting street names (`from_street`, `to_street`), and geographic coordinates. All other tables are joined to this central reference via `intersection_id`.

### Population (`population`)
We also incorporated a `population` table containing annual citywide population estimates. While it does not connect directly to the intersection-level schema, it supports per capita crash rate calculations and provides demographic context for interpreting trends in active transportation safety.

### Excluded Data  
While initially considered, we excluded the `recommended_bicycle_routes` dataset after determining that it duplicated information available in the bicycle network layer and lacked the detail needed for meaningful comparison. The data could not be confidently joined and was unlikely to add new explanatory power to our analysis. Proxies for risk, such as crash severity, lighting, and calming infrastructure, were already present in our model.

### Schema Normalization

All datasets were aligned to WGS 84 and cleaned to support accurate joining. Each resulting table contains only the fields necessary for analysis and follows consistent naming conventions. Each record- whether a crash, street light, or calming feature, can now be attributed to a specific intersection. This enables comparison of safety outcomes based on local infrastructure conditions and supports analysis at the intersection level.

Figure 1 below illustrates the final database schema, which is normalized around a central intersections table and joined to cleaned infrastructure datasets using shared intersection IDs or spatial proximity.

![Figure 1: ER diagram of the created tables and their relationships.](figures/schema.png)

# Data Engineering and Exploration

Building this database required extensive preprocessing and integration across multiple spatial and tabular datasets. These steps were essential to ensure accurate intersection-level joins and to support subsequent exploratory analyses and modeling.

## Data Engineering Workflow

### Data Acquisition and Cleaning  
We obtained data from the Oregon Department of Transportation (ODOT), the Portland Bureau of Transportation (PBOT), and Oregon GEOHub in their original formats, including CSV files, shapefiles, and API outputs. Cleaning steps focused on aligning datasets both geographically and structurally. Crashes were filtered to include only those within Portland city limits and non-highway segments. Records with null or invalid coordinates, such as those present in the `crashes` and `slimits` tables, were removed. Street names were standardized across `crashes`, `network`, and `calming` to ensure join consistency. Categorical fields, such as traffic calming feature codes, were encoded uniformly, and naming inconsistencies (e.g., `WAY` versus `WY`) were corrected. For crashes without an initial intersection match, we used nearest-neighbor joins to impute `intersection_id` assignments, validating the resulting joins through interactive mapping. These processes reduced the crashes dataset from 356,280 metro-area records to 94,841 Portland-specific records suitable for integration with infrastructure layers.

### Schema Normalization  
To integrate these datasets, we implemented a hub-and-spoke relational schema anchored by the `intrsct` table, a deduplicated intersections dataset generated using the `osmnx` package. All supporting tables—including `crashes`, `network`, `slights`, `calming`, `vcounts`, and `slimits`—were linked to `intrsct` via `intersection_id`, either directly or through proximity-based spatial joins. This approach allowed for scalable, reproducible analysis at the intersection level and supported efficient feature aggregation (Figure 1).

### Feature Engineering  
We derived several intersection-level variables to capture infrastructure and environmental context. Lighting characteristics were aggregated from the `slights` table, including counts of streetlights and total wattage, to serve as proxies for illumination. Traffic calming features, such as speed bumps, raised crosswalks, textured crosswalks, and rumble strips, were encoded as binary indicators from the `calming` table. Bicycle infrastructure was mapped using the `network` dataset, including the presence of neighborhood greenways and bike lanes, along with installation years to support pre- and post-installation comparisons. Speed environments were characterized by assigning posted speed limits from the `slimits` table via proximity-based joins. Traffic exposure was controlled through average daily traffic (ADT) data from `vcounts`. Additionally, crash severity was collapsed into an ordinal structure encompassing fatal, injury, and property-damage-only categories. Annual population estimates were included separately to provide per-capita context for citywide crash trends, although they were not directly tied to intersection-level records.

### Data Validation  
Validation procedures confirmed the uniqueness of `intersection_id` values within the `intrsct` table and quantified the rate of unmatched joins. Approximately 25 percent of filtered crashes initially lacked an intersection match; these were reassigned using spatial proximity within a 100-meter buffer, with results verified through visual inspection in Leaflet. These steps ensured a robust, geographically coherent database suitable for subsequent exploratory analysis and modeling.

